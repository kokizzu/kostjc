package presentation

import (
	"os"

	"kostjc/domain"
)


// Code generated by 1_codegen_test.go DO NOT EDIT.


func cmdRun(b *domain.Domain, action string, payload []byte) {
	switch action {
	case domain.AdminBookingAction:
		in := domain.AdminBookingIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminBooking(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminBookingLogsAction:
		in := domain.AdminBookingLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminBookingLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminBorrowedUtensilLogsAction:
		in := domain.AdminBorrowedUtensilLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminBorrowedUtensilLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminBorrowedUtensilsAction:
		in := domain.AdminBorrowedUtensilsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminBorrowedUtensils(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminBuildingAction:
		in := domain.AdminBuildingIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminBuilding(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminBuildingLogsAction:
		in := domain.AdminBuildingLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminBuildingLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminFacilityAction:
		in := domain.AdminFacilityIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminFacility(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminFacilityLogsAction:
		in := domain.AdminFacilityLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminFacilityLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminLaundryAction:
		in := domain.AdminLaundryIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminLaundry(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminLaundryLogsAction:
		in := domain.AdminLaundryLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminLaundryLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminLocationAction:
		in := domain.AdminLocationIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminLocation(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminLocationLogsAction:
		in := domain.AdminLocationLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminLocationLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminMenuAction:
		in := domain.AdminMenuIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminMenu(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminMenuLogsAction:
		in := domain.AdminMenuLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminMenuLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminPaymentAction:
		in := domain.AdminPaymentIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminPayment(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminPaymentLogsAction:
		in := domain.AdminPaymentLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminPaymentLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminRoomAction:
		in := domain.AdminRoomIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminRoom(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminRoomLogsAction:
		in := domain.AdminRoomLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminRoomLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminSaleAction:
		in := domain.AdminSaleIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminSale(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminSaleLogsAction:
		in := domain.AdminSaleLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminSaleLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminSettingFixInconsistenciesAction:
		in := domain.AdminSettingFixInconsistenciesIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminSettingFixInconsistencies(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminSettingsAction:
		in := domain.AdminSettingsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminSettings(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminStockAction:
		in := domain.AdminStockIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminStock(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminStockLogsAction:
		in := domain.AdminStockLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminStockLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminTenantLogsAction:
		in := domain.AdminTenantLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminTenantLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminTenantsAction:
		in := domain.AdminTenantsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminTenants(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminUserLogsAction:
		in := domain.AdminUserLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminUserLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminUsersManagementAction:
		in := domain.AdminUsersManagementIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminUsersManagement(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminWifiDeviceAction:
		in := domain.AdminWifiDeviceIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminWifiDevice(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.AdminWifiDeviceLogsAction:
		in := domain.AdminWifiDeviceLogsIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.AdminWifiDeviceLogs(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestLoginAction:
		in := domain.GuestLoginIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestLogin(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestRegisterAction:
		in := domain.GuestRegisterIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestRegister(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestResendVerificationEmailAction:
		in := domain.GuestResendVerificationEmailIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestResendVerificationEmail(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestResetPasswordAction:
		in := domain.GuestResetPasswordIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestResetPassword(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.GuestVerifyEmailAction:
		in := domain.GuestVerifyEmailIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.GuestVerifyEmail(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.StaffBookingAction:
		in := domain.StaffBookingIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.StaffBooking(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.StaffMissingDataReportAction:
		in := domain.StaffMissingDataReportIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.StaffMissingDataReport(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.StaffOccupancyReportAction:
		in := domain.StaffOccupancyReportIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.StaffOccupancyReport(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.StaffPricePerDayReportAction:
		in := domain.StaffPricePerDayReportIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.StaffPricePerDayReport(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.StaffRevenueReportAction:
		in := domain.StaffRevenueReportIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.StaffRevenueReport(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.StaffSalesAction:
		in := domain.StaffSalesIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.StaffSales(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.StaffWifiDeviceReportAction:
		in := domain.StaffWifiDeviceReportIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.StaffWifiDeviceReport(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserLogoutAction:
		in := domain.UserLogoutIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserLogout(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserProfileAction:
		in := domain.UserProfileIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserProfile(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserSessionKillAction:
		in := domain.UserSessionKillIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserSessionKill(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserSessionsActiveAction:
		in := domain.UserSessionsActiveIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserSessionsActive(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	case domain.UserUpdateProfileAction:
		in := domain.UserUpdateProfileIn{}
		if !in.RequestCommon.FromCli(action, payload, &in) {
			return
		}
		out := b.UserUpdateProfile(&in)
		in.RequestCommon.ToCli(os.Stdout, out, out.ResponseCommon)

	}
}

// Code generated by 1_codegen_test.go DO NOT EDIT.
