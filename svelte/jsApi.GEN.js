
const axios = require("axios");


// rearrange response to be data first instead of axios error
function wrapErr( cb ) {
  return function( err ) {
    let data = ((err.response || {}).data || {})
    if( !data.error ) data.error = err.code
    data._axios = err
    cb( data )
  }
}

// rearrange response to be data first instead of axios error
function wrapOk( cb ) {
  return function( resp ) {
    let data = resp.data || {}
    data._axios = resp
    cb( data )
  }
}

// Code generated by 1_codegen_test.go DO NOT EDIT.
/**
 * @typedef {Object} AdminBookingIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} facilities
 * @property {number} booking.id
 * @property {String} booking.dateStart
 * @property {String} booking.dateEnd
 * @property {number} booking.basePriceIDR
 * @property {String} booking.facilitiesObj
 * @property {number} booking.totalPriceIDR
 * @property {String} booking.paidAt
 * @property {number} booking.tenantId
 * @property {number} booking.createdAt
 * @property {number} booking.createdBy
 * @property {number} booking.updatedAt
 * @property {number} booking.updatedBy
 * @property {number} booking.deletedAt
 * @property {number} booking.deletedBy
 * @property {number} booking.restoredBy
 * @property {Object} booking.extraTenants
 * @property {number} booking.roomId
 */
const AdminBookingIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  facilities: { // []uint64
  }, // []uint64
  booking: { // rqProperty.Bookings
    id: 0, // uint64
    dateStart: '', // string
    dateEnd: '', // string
    basePriceIDR: 0, // int64
    facilitiesObj: '', // string
    totalPriceIDR: 0, // int64
    paidAt: '', // string
    tenantId: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    extraTenants: { // []any
    }, // []any
    roomId: 0, // uint64
  }, // rqProperty.Bookings
}
/**
 * @typedef {Object} AdminBookingOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} booking.id
 * @property {String} booking.dateStart
 * @property {String} booking.dateEnd
 * @property {number} booking.basePriceIDR
 * @property {String} booking.facilitiesObj
 * @property {number} booking.totalPriceIDR
 * @property {String} booking.paidAt
 * @property {number} booking.tenantId
 * @property {number} booking.createdAt
 * @property {number} booking.createdBy
 * @property {number} booking.updatedAt
 * @property {number} booking.updatedBy
 * @property {number} booking.deletedAt
 * @property {number} booking.deletedBy
 * @property {number} booking.restoredBy
 * @property {Object} booking.extraTenants
 * @property {number} booking.roomId
 * @property {Object} bookings
 */
const AdminBookingOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  booking: { // rqProperty.Bookings
    id: 0, // uint64
    dateStart: '', // string
    dateEnd: '', // string
    basePriceIDR: 0, // int64
    facilitiesObj: '', // string
    totalPriceIDR: 0, // int64
    paidAt: '', // string
    tenantId: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    extraTenants: { // []any
    }, // []any
    roomId: 0, // uint64
  }, // rqProperty.Bookings
  bookings: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminBookingCallback
 * @param {AdminBookingOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminBookingIn} i
 * @param {AdminBookingCallback} cb
 * @returns {Promise}
 */
exports.AdminBooking = async function AdminBooking( i, cb ) {
  return await axios.post( '/admin/booking', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminBookingLogsIn
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} withMeta
 */
const AdminBookingLogsIn = {
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  withMeta: false, // bool
}
/**
 * @typedef {Object} AdminBookingLogsOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} logs
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 */
const AdminBookingLogsOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  logs: { // []saProperty.BookingLogs
  }, // []saProperty.BookingLogs
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
}
/**
 * @callback AdminBookingLogsCallback
 * @param {AdminBookingLogsOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminBookingLogsIn} i
 * @param {AdminBookingLogsCallback} cb
 * @returns {Promise}
 */
exports.AdminBookingLogs = async function AdminBookingLogs( i, cb ) {
  return await axios.post( '/admin/bookingLogs', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminBuildingIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {number} building.id
 * @property {String} building.buildingName
 * @property {number} building.locationId
 * @property {Object} building.facilities
 * @property {number} building.createdAt
 * @property {number} building.createdBy
 * @property {number} building.updatedAt
 * @property {number} building.updatedBy
 * @property {number} building.deletedAt
 * @property {number} building.deletedBy
 * @property {number} building.restoredBy
 */
const AdminBuildingIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  building: { // rqProperty.Buildings
    id: 0, // uint64
    buildingName: '', // string
    locationId: 0, // uint64
    facilities: { // []any
    }, // []any
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqProperty.Buildings
}
/**
 * @typedef {Object} AdminBuildingOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} building.id
 * @property {String} building.buildingName
 * @property {number} building.locationId
 * @property {Object} building.facilities
 * @property {number} building.createdAt
 * @property {number} building.createdBy
 * @property {number} building.updatedAt
 * @property {number} building.updatedBy
 * @property {number} building.deletedAt
 * @property {number} building.deletedBy
 * @property {number} building.restoredBy
 * @property {Object} buildings
 */
const AdminBuildingOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  building: { // rqProperty.Buildings
    id: 0, // uint64
    buildingName: '', // string
    locationId: 0, // uint64
    facilities: { // []any
    }, // []any
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqProperty.Buildings
  buildings: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminBuildingCallback
 * @param {AdminBuildingOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminBuildingIn} i
 * @param {AdminBuildingCallback} cb
 * @returns {Promise}
 */
exports.AdminBuilding = async function AdminBuilding( i, cb ) {
  return await axios.post( '/admin/building', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminBuildingLogsIn
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} withMeta
 */
const AdminBuildingLogsIn = {
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  withMeta: false, // bool
}
/**
 * @typedef {Object} AdminBuildingLogsOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} logs
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 */
const AdminBuildingLogsOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  logs: { // []saProperty.BuildingLogs
  }, // []saProperty.BuildingLogs
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
}
/**
 * @callback AdminBuildingLogsCallback
 * @param {AdminBuildingLogsOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminBuildingLogsIn} i
 * @param {AdminBuildingLogsCallback} cb
 * @returns {Promise}
 */
exports.AdminBuildingLogs = async function AdminBuildingLogs( i, cb ) {
  return await axios.post( '/admin/buildingLogs', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminFacilityIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {number} facility.id
 * @property {String} facility.facilityName
 * @property {number} facility.extraChargeIDR
 * @property {number} facility.createdAt
 * @property {number} facility.createdBy
 * @property {number} facility.updatedAt
 * @property {number} facility.updatedBy
 * @property {number} facility.deletedAt
 * @property {number} facility.deletedBy
 * @property {number} facility.restoredBy
 * @property {String} facility.facilityType
 * @property {String} facility.descriptionEN
 */
const AdminFacilityIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  facility: { // rqProperty.Facilities
    id: 0, // uint64
    facilityName: '', // string
    extraChargeIDR: 0, // int64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    facilityType: '', // string
    descriptionEN: '', // string
  }, // rqProperty.Facilities
}
/**
 * @typedef {Object} AdminFacilityOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} facility.id
 * @property {String} facility.facilityName
 * @property {number} facility.extraChargeIDR
 * @property {number} facility.createdAt
 * @property {number} facility.createdBy
 * @property {number} facility.updatedAt
 * @property {number} facility.updatedBy
 * @property {number} facility.deletedAt
 * @property {number} facility.deletedBy
 * @property {number} facility.restoredBy
 * @property {String} facility.facilityType
 * @property {String} facility.descriptionEN
 * @property {Object} facilities
 */
const AdminFacilityOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  facility: { // rqProperty.Facilities
    id: 0, // uint64
    facilityName: '', // string
    extraChargeIDR: 0, // int64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    facilityType: '', // string
    descriptionEN: '', // string
  }, // rqProperty.Facilities
  facilities: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminFacilityCallback
 * @param {AdminFacilityOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminFacilityIn} i
 * @param {AdminFacilityCallback} cb
 * @returns {Promise}
 */
exports.AdminFacility = async function AdminFacility( i, cb ) {
  return await axios.post( '/admin/facility', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminFacilityLogsIn
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} withMeta
 */
const AdminFacilityLogsIn = {
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  withMeta: false, // bool
}
/**
 * @typedef {Object} AdminFacilityLogsOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} logs
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 */
const AdminFacilityLogsOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  logs: { // []saProperty.FacilityLogs
  }, // []saProperty.FacilityLogs
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
}
/**
 * @callback AdminFacilityLogsCallback
 * @param {AdminFacilityLogsOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminFacilityLogsIn} i
 * @param {AdminFacilityLogsCallback} cb
 * @returns {Promise}
 */
exports.AdminFacilityLogs = async function AdminFacilityLogs( i, cb ) {
  return await axios.post( '/admin/facilityLogs', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminLocationIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {number} location.id
 * @property {String} location.name
 * @property {String} location.address
 * @property {String} location.gmapLocation
 * @property {number} location.createdAt
 * @property {number} location.createdBy
 * @property {number} location.updatedAt
 * @property {number} location.updatedBy
 * @property {number} location.deletedAt
 * @property {number} location.deletedBy
 * @property {number} location.restoredBy
 */
const AdminLocationIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  location: { // rqProperty.Locations
    id: 0, // uint64
    name: '', // string
    address: '', // string
    gmapLocation: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqProperty.Locations
}
/**
 * @typedef {Object} AdminLocationOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} location.id
 * @property {String} location.name
 * @property {String} location.address
 * @property {String} location.gmapLocation
 * @property {number} location.createdAt
 * @property {number} location.createdBy
 * @property {number} location.updatedAt
 * @property {number} location.updatedBy
 * @property {number} location.deletedAt
 * @property {number} location.deletedBy
 * @property {number} location.restoredBy
 * @property {Object} locations
 */
const AdminLocationOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  location: { // rqProperty.Locations
    id: 0, // uint64
    name: '', // string
    address: '', // string
    gmapLocation: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqProperty.Locations
  locations: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminLocationCallback
 * @param {AdminLocationOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminLocationIn} i
 * @param {AdminLocationCallback} cb
 * @returns {Promise}
 */
exports.AdminLocation = async function AdminLocation( i, cb ) {
  return await axios.post( '/admin/location', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminLocationLogsIn
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} withMeta
 */
const AdminLocationLogsIn = {
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  withMeta: false, // bool
}
/**
 * @typedef {Object} AdminLocationLogsOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} logs
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 */
const AdminLocationLogsOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  logs: { // []saProperty.LocationLogs
  }, // []saProperty.LocationLogs
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
}
/**
 * @callback AdminLocationLogsCallback
 * @param {AdminLocationLogsOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminLocationLogsIn} i
 * @param {AdminLocationLogsCallback} cb
 * @returns {Promise}
 */
exports.AdminLocationLogs = async function AdminLocationLogs( i, cb ) {
  return await axios.post( '/admin/locationLogs', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminMenuIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {number} menu.id
 * @property {String} menu.name
 * @property {number} menu.hppIDR
 * @property {number} menu.salePriceIDR
 * @property {String} menu.detail
 * @property {String} menu.imageUrl
 * @property {number} menu.createdAt
 * @property {number} menu.createdBy
 * @property {number} menu.updatedAt
 * @property {number} menu.updatedBy
 * @property {number} menu.deletedAt
 * @property {number} menu.deletedBy
 * @property {number} menu.restoredBy
 */
const AdminMenuIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  menu: { // rqCafe.Menus
    id: 0, // uint64
    name: '', // string
    hppIDR: 0, // int64
    salePriceIDR: 0, // int64
    detail: '', // string
    imageUrl: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqCafe.Menus
}
/**
 * @typedef {Object} AdminMenuOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} menu.id
 * @property {String} menu.name
 * @property {number} menu.hppIDR
 * @property {number} menu.salePriceIDR
 * @property {String} menu.detail
 * @property {String} menu.imageUrl
 * @property {number} menu.createdAt
 * @property {number} menu.createdBy
 * @property {number} menu.updatedAt
 * @property {number} menu.updatedBy
 * @property {number} menu.deletedAt
 * @property {number} menu.deletedBy
 * @property {number} menu.restoredBy
 * @property {Object} menus
 */
const AdminMenuOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  menu: { // rqCafe.Menus
    id: 0, // uint64
    name: '', // string
    hppIDR: 0, // int64
    salePriceIDR: 0, // int64
    detail: '', // string
    imageUrl: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqCafe.Menus
  menus: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminMenuCallback
 * @param {AdminMenuOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminMenuIn} i
 * @param {AdminMenuCallback} cb
 * @returns {Promise}
 */
exports.AdminMenu = async function AdminMenu( i, cb ) {
  return await axios.post( '/admin/menu', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminMenuLogsIn
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} withMeta
 */
const AdminMenuLogsIn = {
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  withMeta: false, // bool
}
/**
 * @typedef {Object} AdminMenuLogsOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} logs
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 */
const AdminMenuLogsOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  logs: { // []saCafe.MenuLogs
  }, // []saCafe.MenuLogs
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
}
/**
 * @callback AdminMenuLogsCallback
 * @param {AdminMenuLogsOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminMenuLogsIn} i
 * @param {AdminMenuLogsCallback} cb
 * @returns {Promise}
 */
exports.AdminMenuLogs = async function AdminMenuLogs( i, cb ) {
  return await axios.post( '/admin/menuLogs', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminPaymentIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {number} payment.id
 * @property {number} payment.bookingId
 * @property {String} payment.paymentAt
 * @property {number} payment.paidIDR
 * @property {String} payment.paymentMethod
 * @property {String} payment.paymentStatus
 * @property {String} payment.note
 * @property {number} payment.createdAt
 * @property {number} payment.createdBy
 * @property {number} payment.updatedAt
 * @property {number} payment.updatedBy
 * @property {number} payment.deletedAt
 * @property {number} payment.deletedBy
 * @property {number} payment.restoredBy
 * @property {number} bookingId
 */
const AdminPaymentIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  payment: { // rqProperty.Payments
    id: 0, // uint64
    bookingId: 0, // uint64
    paymentAt: '', // string
    paidIDR: 0, // int64
    paymentMethod: '', // string
    paymentStatus: '', // string
    note: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqProperty.Payments
  bookingId: 0, // uint64
}
/**
 * @typedef {Object} AdminPaymentOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} payment.id
 * @property {number} payment.bookingId
 * @property {String} payment.paymentAt
 * @property {number} payment.paidIDR
 * @property {String} payment.paymentMethod
 * @property {String} payment.paymentStatus
 * @property {String} payment.note
 * @property {number} payment.createdAt
 * @property {number} payment.createdBy
 * @property {number} payment.updatedAt
 * @property {number} payment.updatedBy
 * @property {number} payment.deletedAt
 * @property {number} payment.deletedBy
 * @property {number} payment.restoredBy
 * @property {Object} payments
 * @property {Object} paymentsByBooking
 */
const AdminPaymentOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  payment: { // rqProperty.Payments
    id: 0, // uint64
    bookingId: 0, // uint64
    paymentAt: '', // string
    paidIDR: 0, // int64
    paymentMethod: '', // string
    paymentStatus: '', // string
    note: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqProperty.Payments
  payments: { // [][]any
  }, // [][]any
  paymentsByBooking: { // []rqProperty.Payments
  }, // []rqProperty.Payments
}
/**
 * @callback AdminPaymentCallback
 * @param {AdminPaymentOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminPaymentIn} i
 * @param {AdminPaymentCallback} cb
 * @returns {Promise}
 */
exports.AdminPayment = async function AdminPayment( i, cb ) {
  return await axios.post( '/admin/payment', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminPaymentLogsIn
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} withMeta
 */
const AdminPaymentLogsIn = {
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  withMeta: false, // bool
}
/**
 * @typedef {Object} AdminPaymentLogsOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} logs
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 */
const AdminPaymentLogsOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  logs: { // []saProperty.PaymentLogs
  }, // []saProperty.PaymentLogs
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
}
/**
 * @callback AdminPaymentLogsCallback
 * @param {AdminPaymentLogsOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminPaymentLogsIn} i
 * @param {AdminPaymentLogsCallback} cb
 * @returns {Promise}
 */
exports.AdminPaymentLogs = async function AdminPaymentLogs( i, cb ) {
  return await axios.post( '/admin/paymentLogs', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminRoomIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {number} room.id
 * @property {String} room.roomName
 * @property {number} room.basePriceIDR
 * @property {number} room.currentTenantId
 * @property {String} room.firstUseAt
 * @property {number} room.createdAt
 * @property {number} room.createdBy
 * @property {number} room.updatedAt
 * @property {number} room.updatedBy
 * @property {number} room.deletedAt
 * @property {number} room.deletedBy
 * @property {number} room.restoredBy
 * @property {number} room.buildingId
 * @property {String} room.lastUseAt
 * @property {String} room.roomSize
 * @property {String} room.imageUrl
 */
const AdminRoomIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  room: { // rqProperty.Rooms
    id: 0, // uint64
    roomName: '', // string
    basePriceIDR: 0, // int64
    currentTenantId: 0, // uint64
    firstUseAt: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    buildingId: 0, // uint64
    lastUseAt: '', // string
    roomSize: '', // string
    imageUrl: '', // string
  }, // rqProperty.Rooms
}
/**
 * @typedef {Object} AdminRoomOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} room.id
 * @property {String} room.roomName
 * @property {number} room.basePriceIDR
 * @property {number} room.currentTenantId
 * @property {String} room.firstUseAt
 * @property {number} room.createdAt
 * @property {number} room.createdBy
 * @property {number} room.updatedAt
 * @property {number} room.updatedBy
 * @property {number} room.deletedAt
 * @property {number} room.deletedBy
 * @property {number} room.restoredBy
 * @property {number} room.buildingId
 * @property {String} room.lastUseAt
 * @property {String} room.roomSize
 * @property {String} room.imageUrl
 * @property {Object} rooms
 */
const AdminRoomOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  room: { // rqProperty.Rooms
    id: 0, // uint64
    roomName: '', // string
    basePriceIDR: 0, // int64
    currentTenantId: 0, // uint64
    firstUseAt: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    buildingId: 0, // uint64
    lastUseAt: '', // string
    roomSize: '', // string
    imageUrl: '', // string
  }, // rqProperty.Rooms
  rooms: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminRoomCallback
 * @param {AdminRoomOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminRoomIn} i
 * @param {AdminRoomCallback} cb
 * @returns {Promise}
 */
exports.AdminRoom = async function AdminRoom( i, cb ) {
  return await axios.post( '/admin/room', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminRoomLogsIn
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} withMeta
 */
const AdminRoomLogsIn = {
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  withMeta: false, // bool
}
/**
 * @typedef {Object} AdminRoomLogsOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} logs
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 */
const AdminRoomLogsOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  logs: { // []saProperty.RoomLogs
  }, // []saProperty.RoomLogs
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
}
/**
 * @callback AdminRoomLogsCallback
 * @param {AdminRoomLogsOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminRoomLogsIn} i
 * @param {AdminRoomLogsCallback} cb
 * @returns {Promise}
 */
exports.AdminRoomLogs = async function AdminRoomLogs( i, cb ) {
  return await axios.post( '/admin/roomLogs', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminSaleIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {number} sale.id
 * @property {String} sale.cashier
 * @property {number} sale.tenantId
 * @property {String} sale.buyerName
 * @property {Object} sale.menuIds
 * @property {number} sale.qrisIDR
 * @property {number} sale.cashIDR
 * @property {number} sale.debtIDR
 * @property {number} sale.topupIDR
 * @property {number} sale.totalPriceIDR
 * @property {String} sale.salesDate
 * @property {String} sale.paidAt
 * @property {String} sale.note
 * @property {number} sale.donation
 * @property {number} sale.transferIDR
 * @property {number} sale.createdAt
 * @property {number} sale.createdBy
 * @property {number} sale.updatedAt
 * @property {number} sale.updatedBy
 * @property {number} sale.deletedAt
 * @property {number} sale.deletedBy
 * @property {number} sale.restoredBy
 * @property {number} tenantID
 */
const AdminSaleIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  sale: { // rqCafe.Sales
    id: 0, // uint64
    cashier: '', // string
    tenantId: 0, // uint64
    buyerName: '', // string
    menuIds: { // []any
    }, // []any
    qrisIDR: 0, // int64
    cashIDR: 0, // int64
    debtIDR: 0, // int64
    topupIDR: 0, // int64
    totalPriceIDR: 0, // int64
    salesDate: '', // string
    paidAt: '', // string
    note: '', // string
    donation: 0, // int64
    transferIDR: 0, // int64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqCafe.Sales
  tenantID: 0, // uint64
}
/**
 * @typedef {Object} AdminSaleOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} sale.id
 * @property {String} sale.cashier
 * @property {number} sale.tenantId
 * @property {String} sale.buyerName
 * @property {Object} sale.menuIds
 * @property {number} sale.qrisIDR
 * @property {number} sale.cashIDR
 * @property {number} sale.debtIDR
 * @property {number} sale.topupIDR
 * @property {number} sale.totalPriceIDR
 * @property {String} sale.salesDate
 * @property {String} sale.paidAt
 * @property {String} sale.note
 * @property {number} sale.donation
 * @property {number} sale.transferIDR
 * @property {number} sale.createdAt
 * @property {number} sale.createdBy
 * @property {number} sale.updatedAt
 * @property {number} sale.updatedBy
 * @property {number} sale.deletedAt
 * @property {number} sale.deletedBy
 * @property {number} sale.restoredBy
 * @property {Object} sales
 */
const AdminSaleOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  sale: { // rqCafe.Sales
    id: 0, // uint64
    cashier: '', // string
    tenantId: 0, // uint64
    buyerName: '', // string
    menuIds: { // []any
    }, // []any
    qrisIDR: 0, // int64
    cashIDR: 0, // int64
    debtIDR: 0, // int64
    topupIDR: 0, // int64
    totalPriceIDR: 0, // int64
    salesDate: '', // string
    paidAt: '', // string
    note: '', // string
    donation: 0, // int64
    transferIDR: 0, // int64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqCafe.Sales
  sales: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminSaleCallback
 * @param {AdminSaleOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminSaleIn} i
 * @param {AdminSaleCallback} cb
 * @returns {Promise}
 */
exports.AdminSale = async function AdminSale( i, cb ) {
  return await axios.post( '/admin/sale', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminSaleLogsIn
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} withMeta
 */
const AdminSaleLogsIn = {
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  withMeta: false, // bool
}
/**
 * @typedef {Object} AdminSaleLogsOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} logs
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 */
const AdminSaleLogsOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  logs: { // []saCafe.SaleLogs
  }, // []saCafe.SaleLogs
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
}
/**
 * @callback AdminSaleLogsCallback
 * @param {AdminSaleLogsOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminSaleLogsIn} i
 * @param {AdminSaleLogsCallback} cb
 * @returns {Promise}
 */
exports.AdminSaleLogs = async function AdminSaleLogs( i, cb ) {
  return await axios.post( '/admin/saleLogs', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminStockIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {number} stock.id
 * @property {String} stock.stockName
 * @property {String} stock.stockAddedAt
 * @property {number} stock.quantity
 * @property {number} stock.priceIDR
 * @property {number} stock.createdAt
 * @property {number} stock.createdBy
 * @property {number} stock.updatedAt
 * @property {number} stock.updatedBy
 * @property {number} stock.deletedAt
 * @property {number} stock.deletedBy
 * @property {number} stock.restoredBy
 */
const AdminStockIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  stock: { // rqProperty.Stocks
    id: 0, // uint64
    stockName: '', // string
    stockAddedAt: '', // string
    quantity: 0, // int64
    priceIDR: 0, // int64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqProperty.Stocks
}
/**
 * @typedef {Object} AdminStockOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} stock.id
 * @property {String} stock.stockName
 * @property {String} stock.stockAddedAt
 * @property {number} stock.quantity
 * @property {number} stock.priceIDR
 * @property {number} stock.createdAt
 * @property {number} stock.createdBy
 * @property {number} stock.updatedAt
 * @property {number} stock.updatedBy
 * @property {number} stock.deletedAt
 * @property {number} stock.deletedBy
 * @property {number} stock.restoredBy
 * @property {Object} stocks
 */
const AdminStockOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  stock: { // rqProperty.Stocks
    id: 0, // uint64
    stockName: '', // string
    stockAddedAt: '', // string
    quantity: 0, // int64
    priceIDR: 0, // int64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqProperty.Stocks
  stocks: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminStockCallback
 * @param {AdminStockOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminStockIn} i
 * @param {AdminStockCallback} cb
 * @returns {Promise}
 */
exports.AdminStock = async function AdminStock( i, cb ) {
  return await axios.post( '/admin/stock', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminStockLogsIn
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} withMeta
 */
const AdminStockLogsIn = {
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  withMeta: false, // bool
}
/**
 * @typedef {Object} AdminStockLogsOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} logs
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 */
const AdminStockLogsOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  logs: { // []saProperty.StockLogs
  }, // []saProperty.StockLogs
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
}
/**
 * @callback AdminStockLogsCallback
 * @param {AdminStockLogsOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminStockLogsIn} i
 * @param {AdminStockLogsCallback} cb
 * @returns {Promise}
 */
exports.AdminStockLogs = async function AdminStockLogs( i, cb ) {
  return await axios.post( '/admin/stockLogs', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminTenantsIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {number} tenant.id
 * @property {String} tenant.tenantName
 * @property {String} tenant.ktpRegion
 * @property {String} tenant.ktpNumber
 * @property {String} tenant.ktpName
 * @property {String} tenant.ktpPlaceBirth
 * @property {String} tenant.ktpDateBirth
 * @property {String} tenant.ktpGender
 * @property {String} tenant.ktpAddress
 * @property {String} tenant.ktpRtRw
 * @property {String} tenant.ktpKelurahanDesa
 * @property {String} tenant.ktpKecamatan
 * @property {String} tenant.ktpReligion
 * @property {String} tenant.ktpMaritalStatus
 * @property {String} tenant.ktpCitizenship
 * @property {String} tenant.telegramUsername
 * @property {String} tenant.whatsappNumber
 * @property {number} tenant.createdAt
 * @property {number} tenant.createdBy
 * @property {number} tenant.updatedAt
 * @property {number} tenant.updatedBy
 * @property {number} tenant.deletedAt
 * @property {number} tenant.deletedBy
 * @property {number} tenant.restoredBy
 * @property {String} tenant.ktpOccupation
 */
const AdminTenantsIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  tenant: { // rqAuth.Tenants
    id: 0, // uint64
    tenantName: '', // string
    ktpRegion: '', // string
    ktpNumber: '', // string
    ktpName: '', // string
    ktpPlaceBirth: '', // string
    ktpDateBirth: '', // string
    ktpGender: '', // string
    ktpAddress: '', // string
    ktpRtRw: '', // string
    ktpKelurahanDesa: '', // string
    ktpKecamatan: '', // string
    ktpReligion: '', // string
    ktpMaritalStatus: '', // string
    ktpCitizenship: '', // string
    telegramUsername: '', // string
    whatsappNumber: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    ktpOccupation: '', // string
  }, // rqAuth.Tenants
}
/**
 * @typedef {Object} AdminTenantsOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} tenant.id
 * @property {String} tenant.tenantName
 * @property {String} tenant.ktpRegion
 * @property {String} tenant.ktpNumber
 * @property {String} tenant.ktpName
 * @property {String} tenant.ktpPlaceBirth
 * @property {String} tenant.ktpDateBirth
 * @property {String} tenant.ktpGender
 * @property {String} tenant.ktpAddress
 * @property {String} tenant.ktpRtRw
 * @property {String} tenant.ktpKelurahanDesa
 * @property {String} tenant.ktpKecamatan
 * @property {String} tenant.ktpReligion
 * @property {String} tenant.ktpMaritalStatus
 * @property {String} tenant.ktpCitizenship
 * @property {String} tenant.telegramUsername
 * @property {String} tenant.whatsappNumber
 * @property {number} tenant.createdAt
 * @property {number} tenant.createdBy
 * @property {number} tenant.updatedAt
 * @property {number} tenant.updatedBy
 * @property {number} tenant.deletedAt
 * @property {number} tenant.deletedBy
 * @property {number} tenant.restoredBy
 * @property {String} tenant.ktpOccupation
 * @property {Object} tenants
 */
const AdminTenantsOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  tenant: { // rqAuth.Tenants
    id: 0, // uint64
    tenantName: '', // string
    ktpRegion: '', // string
    ktpNumber: '', // string
    ktpName: '', // string
    ktpPlaceBirth: '', // string
    ktpDateBirth: '', // string
    ktpGender: '', // string
    ktpAddress: '', // string
    ktpRtRw: '', // string
    ktpKelurahanDesa: '', // string
    ktpKecamatan: '', // string
    ktpReligion: '', // string
    ktpMaritalStatus: '', // string
    ktpCitizenship: '', // string
    telegramUsername: '', // string
    whatsappNumber: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    ktpOccupation: '', // string
  }, // rqAuth.Tenants
  tenants: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminTenantsCallback
 * @param {AdminTenantsOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminTenantsIn} i
 * @param {AdminTenantsCallback} cb
 * @returns {Promise}
 */
exports.AdminTenants = async function AdminTenants( i, cb ) {
  return await axios.post( '/admin/tenants', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminUsersManagementIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {String} user.role
 */
const AdminUsersManagementIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
    role: '', // string
  }, // rqAuth.Users
}
/**
 * @typedef {Object} AdminUsersManagementOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {String} user.role
 * @property {Object} users
 */
const AdminUsersManagementOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
    role: '', // string
  }, // rqAuth.Users
  users: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminUsersManagementCallback
 * @param {AdminUsersManagementOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminUsersManagementIn} i
 * @param {AdminUsersManagementCallback} cb
 * @returns {Promise}
 */
exports.AdminUsersManagement = async function AdminUsersManagement( i, cb ) {
  return await axios.post( '/admin/usersManagement', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminWifiDeviceIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {number} wifiDevice.id
 * @property {String} wifiDevice.startAt
 * @property {String} wifiDevice.endAt
 * @property {String} wifiDevice.paidAt
 * @property {number} wifiDevice.priceIDR
 * @property {number} wifiDevice.tenantId
 * @property {String} wifiDevice.macAddress
 * @property {number} wifiDevice.roomId
 * @property {number} wifiDevice.createdAt
 * @property {number} wifiDevice.createdBy
 * @property {number} wifiDevice.updatedAt
 * @property {number} wifiDevice.updatedBy
 * @property {number} wifiDevice.deletedAt
 * @property {number} wifiDevice.deletedBy
 * @property {number} wifiDevice.restoredBy
 */
const AdminWifiDeviceIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  wifiDevice: { // rqProperty.WifiDevices
    id: 0, // uint64
    startAt: '', // string
    endAt: '', // string
    paidAt: '', // string
    priceIDR: 0, // int64
    tenantId: 0, // uint64
    macAddress: '', // string
    roomId: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqProperty.WifiDevices
}
/**
 * @typedef {Object} AdminWifiDeviceOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} wifiDevice.id
 * @property {String} wifiDevice.startAt
 * @property {String} wifiDevice.endAt
 * @property {String} wifiDevice.paidAt
 * @property {number} wifiDevice.priceIDR
 * @property {number} wifiDevice.tenantId
 * @property {String} wifiDevice.macAddress
 * @property {number} wifiDevice.roomId
 * @property {number} wifiDevice.createdAt
 * @property {number} wifiDevice.createdBy
 * @property {number} wifiDevice.updatedAt
 * @property {number} wifiDevice.updatedBy
 * @property {number} wifiDevice.deletedAt
 * @property {number} wifiDevice.deletedBy
 * @property {number} wifiDevice.restoredBy
 * @property {Object} wifiDevices
 */
const AdminWifiDeviceOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  wifiDevice: { // rqProperty.WifiDevices
    id: 0, // uint64
    startAt: '', // string
    endAt: '', // string
    paidAt: '', // string
    priceIDR: 0, // int64
    tenantId: 0, // uint64
    macAddress: '', // string
    roomId: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqProperty.WifiDevices
  wifiDevices: { // [][]any
  }, // [][]any
}
/**
 * @callback AdminWifiDeviceCallback
 * @param {AdminWifiDeviceOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminWifiDeviceIn} i
 * @param {AdminWifiDeviceCallback} cb
 * @returns {Promise}
 */
exports.AdminWifiDevice = async function AdminWifiDevice( i, cb ) {
  return await axios.post( '/admin/wifiDevice', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} AdminWifiDeviceLogsIn
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} withMeta
 */
const AdminWifiDeviceLogsIn = {
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  withMeta: false, // bool
}
/**
 * @typedef {Object} AdminWifiDeviceLogsOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} logs
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 */
const AdminWifiDeviceLogsOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  logs: { // []saProperty.WifiDeviceLogs
  }, // []saProperty.WifiDeviceLogs
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
}
/**
 * @callback AdminWifiDeviceLogsCallback
 * @param {AdminWifiDeviceLogsOut} o
 * @returns {Promise}
 */
/**
 * @param  {AdminWifiDeviceLogsIn} i
 * @param {AdminWifiDeviceLogsCallback} cb
 * @returns {Promise}
 */
exports.AdminWifiDeviceLogs = async function AdminWifiDeviceLogs( i, cb ) {
  return await axios.post( '/admin/wifiDeviceLogs', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestLoginIn
 * @property {String} email
 * @property {String} password
 */
const GuestLoginIn = {
  email: '', // string
  password: '', // string
}
/**
 * @typedef {Object} GuestLoginOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {String} user.role
 * @property {Object} segments
 */
const GuestLoginOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
    role: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback GuestLoginCallback
 * @param {GuestLoginOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestLoginIn} i
 * @param {GuestLoginCallback} cb
 * @returns {Promise}
 */
exports.GuestLogin = async function GuestLogin( i, cb ) {
  return await axios.post( '/guest/login', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestRegisterIn
 * @property {String} email
 * @property {String} password
 */
const GuestRegisterIn = {
  email: '', // string
  password: '', // string
}
/**
 * @typedef {Object} GuestRegisterOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {String} user.role
 * @property {String} verifyEmailUrl
 */
const GuestRegisterOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
    role: '', // string
  }, // rqAuth.Users
  verifyEmailUrl: '', // string
}
/**
 * @callback GuestRegisterCallback
 * @param {GuestRegisterOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestRegisterIn} i
 * @param {GuestRegisterCallback} cb
 * @returns {Promise}
 */
exports.GuestRegister = async function GuestRegister( i, cb ) {
  return await axios.post( '/guest/register', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestResendVerificationEmailIn
 * @property {String} email
 */
const GuestResendVerificationEmailIn = {
  email: '', // string
}
/**
 * @typedef {Object} GuestResendVerificationEmailOut
 * @property {Object} ok
 * @property {String} verifyEmailUrl
 */
const GuestResendVerificationEmailOut = {
  ok: false, // bool
  verifyEmailUrl: '', // string
}
/**
 * @callback GuestResendVerificationEmailCallback
 * @param {GuestResendVerificationEmailOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestResendVerificationEmailIn} i
 * @param {GuestResendVerificationEmailCallback} cb
 * @returns {Promise}
 */
exports.GuestResendVerificationEmail = async function GuestResendVerificationEmail( i, cb ) {
  return await axios.post( '/guest/resendVerificationEmail', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestResetPasswordIn
 * @property {String} secretCode
 * @property {String} hash
 * @property {String} password
 */
const GuestResetPasswordIn = {
  secretCode: '', // string
  hash: '', // string
  password: '', // string
}
/**
 * @typedef {Object} GuestResetPasswordOut
 * @property {Object} ok
 */
const GuestResetPasswordOut = {
  ok: false, // bool
}
/**
 * @callback GuestResetPasswordCallback
 * @param {GuestResetPasswordOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestResetPasswordIn} i
 * @param {GuestResetPasswordCallback} cb
 * @returns {Promise}
 */
exports.GuestResetPassword = async function GuestResetPassword( i, cb ) {
  return await axios.post( '/guest/resetPassword', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestVerifyEmailIn
 * @property {String} secretCode
 * @property {String} hash
 */
const GuestVerifyEmailIn = {
  secretCode: '', // string
  hash: '', // string
}
/**
 * @typedef {Object} GuestVerifyEmailOut
 * @property {Object} ok
 * @property {String} email
 */
const GuestVerifyEmailOut = {
  ok: false, // bool
  email: '', // string
}
/**
 * @callback GuestVerifyEmailCallback
 * @param {GuestVerifyEmailOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestVerifyEmailIn} i
 * @param {GuestVerifyEmailCallback} cb
 * @returns {Promise}
 */
exports.GuestVerifyEmail = async function GuestVerifyEmail( i, cb ) {
  return await axios.post( '/guest/verifyEmail', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} StaffBookingIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} facilities
 * @property {number} booking.id
 * @property {String} booking.dateStart
 * @property {String} booking.dateEnd
 * @property {number} booking.basePriceIDR
 * @property {String} booking.facilitiesObj
 * @property {number} booking.totalPriceIDR
 * @property {String} booking.paidAt
 * @property {number} booking.tenantId
 * @property {number} booking.createdAt
 * @property {number} booking.createdBy
 * @property {number} booking.updatedAt
 * @property {number} booking.updatedBy
 * @property {number} booking.deletedAt
 * @property {number} booking.deletedBy
 * @property {number} booking.restoredBy
 * @property {Object} booking.extraTenants
 * @property {number} booking.roomId
 */
const StaffBookingIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  facilities: { // []uint64
  }, // []uint64
  booking: { // rqProperty.Bookings
    id: 0, // uint64
    dateStart: '', // string
    dateEnd: '', // string
    basePriceIDR: 0, // int64
    facilitiesObj: '', // string
    totalPriceIDR: 0, // int64
    paidAt: '', // string
    tenantId: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    extraTenants: { // []any
    }, // []any
    roomId: 0, // uint64
  }, // rqProperty.Bookings
}
/**
 * @typedef {Object} StaffBookingOut
 * @property {String} pager.search
 * @property {String} pager.searchBy
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} booking.id
 * @property {String} booking.dateStart
 * @property {String} booking.dateEnd
 * @property {number} booking.basePriceIDR
 * @property {String} booking.facilitiesObj
 * @property {number} booking.totalPriceIDR
 * @property {String} booking.paidAt
 * @property {number} booking.tenantId
 * @property {number} booking.createdAt
 * @property {number} booking.createdBy
 * @property {number} booking.updatedAt
 * @property {number} booking.updatedBy
 * @property {number} booking.deletedAt
 * @property {number} booking.deletedBy
 * @property {number} booking.restoredBy
 * @property {Object} booking.extraTenants
 * @property {number} booking.roomId
 * @property {Object} bookings
 */
const StaffBookingOut = {
  pager: { // zCrud.PagerOut
    search: '', // string
    searchBy: '', // string
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  booking: { // rqProperty.Bookings
    id: 0, // uint64
    dateStart: '', // string
    dateEnd: '', // string
    basePriceIDR: 0, // int64
    facilitiesObj: '', // string
    totalPriceIDR: 0, // int64
    paidAt: '', // string
    tenantId: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    extraTenants: { // []any
    }, // []any
    roomId: 0, // uint64
  }, // rqProperty.Bookings
  bookings: { // [][]any
  }, // [][]any
}
/**
 * @callback StaffBookingCallback
 * @param {StaffBookingOut} o
 * @returns {Promise}
 */
/**
 * @param  {StaffBookingIn} i
 * @param {StaffBookingCallback} cb
 * @returns {Promise}
 */
exports.StaffBooking = async function StaffBooking( i, cb ) {
  return await axios.post( '/staff/booking', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} StaffMissingDataReportIn
 */
const StaffMissingDataReportIn = {
}
/**
 * @typedef {Object} StaffMissingDataReportOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {String} user.role
 * @property {Object} segments
 * @property {Object} missingData
 */
const StaffMissingDataReportOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
    role: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
  missingData: { // []rqProperty.RoomMissingTenantData
  }, // []rqProperty.RoomMissingTenantData
}
/**
 * @callback StaffMissingDataReportCallback
 * @param {StaffMissingDataReportOut} o
 * @returns {Promise}
 */
/**
 * @param  {StaffMissingDataReportIn} i
 * @param {StaffMissingDataReportCallback} cb
 * @returns {Promise}
 */
exports.StaffMissingDataReport = async function StaffMissingDataReport( i, cb ) {
  return await axios.post( '/staff/missingDataReport', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} StaffOccupancyReportIn
 * @property {String} monthStart
 * @property {String} monthEnd
 */
const StaffOccupancyReportIn = {
  monthStart: '', // string
  monthEnd: '', // string
}
/**
 * @typedef {Object} StaffOccupancyReportOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {String} user.role
 * @property {Object} segments
 * @property {Array<String>} roomNames
 * @property {Object} bookings
 */
const StaffOccupancyReportOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
    role: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
  roomNames: [], // []string
  bookings: { // []rqProperty.BookingDetail
  }, // []rqProperty.BookingDetail
}
/**
 * @callback StaffOccupancyReportCallback
 * @param {StaffOccupancyReportOut} o
 * @returns {Promise}
 */
/**
 * @param  {StaffOccupancyReportIn} i
 * @param {StaffOccupancyReportCallback} cb
 * @returns {Promise}
 */
exports.StaffOccupancyReport = async function StaffOccupancyReport( i, cb ) {
  return await axios.post( '/staff/occupancyReport', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} StaffRevenueReportIn
 * @property {String} yearMonth
 */
const StaffRevenueReportIn = {
  yearMonth: '', // string
}
/**
 * @typedef {Object} StaffRevenueReportOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {String} user.role
 * @property {Object} segments
 * @property {Object} revenueReports
 */
const StaffRevenueReportOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
    role: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
  revenueReports: { // []rqProperty.RevenueReport
  }, // []rqProperty.RevenueReport
}
/**
 * @callback StaffRevenueReportCallback
 * @param {StaffRevenueReportOut} o
 * @returns {Promise}
 */
/**
 * @param  {StaffRevenueReportIn} i
 * @param {StaffRevenueReportCallback} cb
 * @returns {Promise}
 */
exports.StaffRevenueReport = async function StaffRevenueReport( i, cb ) {
  return await axios.post( '/staff/revenueReport', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} StaffSalesIn
 * @property {String} staffData
 */
const StaffSalesIn = {
  staffData: '', // string
}
/**
 * @typedef {Object} StaffSalesOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {String} user.role
 * @property {Object} segments
 */
const StaffSalesOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
    role: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback StaffSalesCallback
 * @param {StaffSalesOut} o
 * @returns {Promise}
 */
/**
 * @param  {StaffSalesIn} i
 * @param {StaffSalesCallback} cb
 * @returns {Promise}
 */
exports.StaffSales = async function StaffSales( i, cb ) {
  return await axios.post( '/staff/sales', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} StaffWifiDeviceReportIn
 * @property {String} yearMonth
 */
const StaffWifiDeviceReportIn = {
  yearMonth: '', // string
}
/**
 * @typedef {Object} StaffWifiDeviceReportOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {String} user.role
 * @property {Object} segments
 * @property {Object} wifiDeviceReports
 */
const StaffWifiDeviceReportOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
    role: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
  wifiDeviceReports: { // []rqProperty.WifiDeviceReport
  }, // []rqProperty.WifiDeviceReport
}
/**
 * @callback StaffWifiDeviceReportCallback
 * @param {StaffWifiDeviceReportOut} o
 * @returns {Promise}
 */
/**
 * @param  {StaffWifiDeviceReportIn} i
 * @param {StaffWifiDeviceReportCallback} cb
 * @returns {Promise}
 */
exports.StaffWifiDeviceReport = async function StaffWifiDeviceReport( i, cb ) {
  return await axios.post( '/staff/wifiDeviceReport', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserLogoutIn
 */
const UserLogoutIn = {
}
/**
 * @typedef {Object} UserLogoutOut
 * @property {number} logoutAt
 */
const UserLogoutOut = {
  logoutAt: 0, // int64
}
/**
 * @callback UserLogoutCallback
 * @param {UserLogoutOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserLogoutIn} i
 * @param {UserLogoutCallback} cb
 * @returns {Promise}
 */
exports.UserLogout = async function UserLogout( i, cb ) {
  return await axios.post( '/user/logout', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserProfileIn
 */
const UserProfileIn = {
}
/**
 * @typedef {Object} UserProfileOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {String} user.role
 * @property {Object} segments
 */
const UserProfileOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
    role: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback UserProfileCallback
 * @param {UserProfileOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserProfileIn} i
 * @param {UserProfileCallback} cb
 * @returns {Promise}
 */
exports.UserProfile = async function UserProfile( i, cb ) {
  return await axios.post( '/user/profile', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserSessionKillIn
 * @property {String} sessionTokenHash
 */
const UserSessionKillIn = {
  sessionTokenHash: '', // string
}
/**
 * @typedef {Object} UserSessionKillOut
 * @property {number} logoutAt
 * @property {number} sessionTerminated
 */
const UserSessionKillOut = {
  logoutAt: 0, // int64
  sessionTerminated: 0, // int64
}
/**
 * @callback UserSessionKillCallback
 * @param {UserSessionKillOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserSessionKillIn} i
 * @param {UserSessionKillCallback} cb
 * @returns {Promise}
 */
exports.UserSessionKill = async function UserSessionKill( i, cb ) {
  return await axios.post( '/user/sessionKill', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserSessionsActiveIn
 */
const UserSessionsActiveIn = {
}
/**
 * @typedef {Object} UserSessionsActiveOut
 * @property {Object} sessionsActive
 */
const UserSessionsActiveOut = {
  sessionsActive: { // []rqAuth.Sessions
  }, // []rqAuth.Sessions
}
/**
 * @callback UserSessionsActiveCallback
 * @param {UserSessionsActiveOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserSessionsActiveIn} i
 * @param {UserSessionsActiveCallback} cb
 * @returns {Promise}
 */
exports.UserSessionsActive = async function UserSessionsActive( i, cb ) {
  return await axios.post( '/user/sessionsActive', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserUpdateProfileIn
 * @property {String} userName
 * @property {String} fullName
 * @property {String} email
 * @property {String} country
 * @property {String} language
 */
const UserUpdateProfileIn = {
  userName: '', // string
  fullName: '', // string
  email: '', // string
  country: '', // string
  language: '', // string
}
/**
 * @typedef {Object} UserUpdateProfileOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.userName
 * @property {String} user.role
 * @property {Object} segments
 */
const UserUpdateProfileOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    userName: '', // string
    role: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback UserUpdateProfileCallback
 * @param {UserProfileOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserUpdateProfileIn} i
 * @param {UserUpdateProfileCallback} cb
 * @returns {Promise}
 */
exports.UserUpdateProfile = async function UserUpdateProfile( i, cb ) {
  return await axios.post( '/user/updateProfile', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}


// Code generated by 1_codegen_test.go DO NOT EDIT.
